namespace ffi_test

import "beagle.ffi" as ffi
import "beagle.primitive" as primitive
import "repl_test" as repl
import "socket_test" as socket

struct State {
    rect_x
    rect_y
    dx
    dy
    screen_width
    screen_height
    rect_color
}

struct Color {
    r
    g
    b
}


let state = atom(State {
    rect_x: 200,
    rect_y: 150,
    dx: 2,
    dy: 2,
    screen_width: 640,
    screen_height: 480,
    rect_color: Color { r: 255, g: 0, b: 0}
})


let sdl = ffi/load_library("/opt/homebrew/lib/libSDL2-2.0.0.dylib")
let sdl_init = ffi/get_function(sdl, "SDL_Init", [ffi/Type.U32], ffi/Type.I32)
let sdl_create_window = ffi/get_function(
    sdl,
    "SDL_CreateWindow",
    [ffi/Type.String, ffi/Type.I32, ffi/Type.I32, ffi/Type.I32, ffi/Type.I32, ffi/Type.U32],
    ffi/Type.Pointer
)
let sdl_create_renderer = ffi/get_function(
    sdl,
    "SDL_CreateRenderer",
    [ffi/Type.Pointer, ffi/Type.I32, ffi/Type.U32],
    ffi/Type.Pointer
)
let sdl_set_render_draw_color = ffi/get_function(
    sdl,
    "SDL_SetRenderDrawColor",
    [ffi/Type.Pointer, ffi/Type.U8, ffi/Type.U8, ffi/Type.U8, ffi/Type.U8],
    ffi/Type.I32
)
let sdl_render_clear = ffi/get_function(sdl, "SDL_RenderClear", [ffi/Type.Pointer], ffi/Type.I32)
let sdl_render_present = ffi/get_function(sdl, "SDL_RenderPresent", [ffi/Type.Pointer], ffi/Type.Void)
let sdl_poll_event = ffi/get_function(sdl, "SDL_PollEvent", [ffi/Type.Pointer], ffi/Type.I32)
let sdl_delay = ffi/get_function(sdl, "SDL_Delay", [ffi/Type.U32], ffi/Type.Void)
let sdl_render_fill_rect = ffi/get_function(
    sdl,
    "SDL_RenderFillRect",
    [ffi/Type.Pointer, ffi/Type.Pointer],
    ffi/Type.I32
)

let sdl_get_window_size = ffi/get_function(
    sdl,
    "SDL_GetWindowSize",
    [ffi/Type.Pointer, ffi/Type.Pointer, ffi/Type.Pointer],
    ffi/Type.Void
)

// Rect structure: [x, y, w, h] (4 * 4 bytes = 16 bytes)
let rect_size = 16

fn update_state(new_width, new_height) {
    swap!(state, fn(s) {
        State {
            rect_x: s.rect_x + s.dx,
            rect_y: s.rect_y + s.dy,
            dx: if s.rect_x + s.dx <= 0 || s.rect_x + s.dx + 240 >= s.screen_width {
                s.dx * -1
            } else {
                s.dx
            },
            dy: if s.rect_y + s.dy <= 0 || s.rect_y + s.dy + 180 >= s.screen_height {
                s.dy * -1
            } else {
                s.dy
            },
            screen_width: new_width,
            screen_height: new_height,
            rect_color: s.rect_color
        }
    })
}

fn change_color(color) {
    // TODO: assoc function for structs
    swap!(state, fn(s) {
        State {
            rect_x: s.rect_x,
            rect_y: s.rect_y,
            dx: s.dx,
            dy: s.dy,
            screen_width: s.screen_width,
            screen_height: s.screen_height,
            rect_color: color
        }
    })
}

fn loop_it(buffer, renderer, rect_ptr, window) {
    sdl_poll_event(buffer)
    if ffi/get_u32(buffer, 0) == 256 {
        true
    } else {
        // Check if window has been resized
        let current_state = deref(state)
        let width_ptr = ffi/allocate(4)
        let height_ptr = ffi/allocate(4)
        sdl_get_window_size(window, width_ptr, height_ptr)

        let new_width = ffi/get_i32(width_ptr, 0)
        let new_height = ffi/get_i32(height_ptr, 0)

        let updated_state = update_state(new_width, new_height)

        // Clear the renderer
        sdl_set_render_draw_color(renderer, 0, 0, 0, 255) // Black background
        sdl_render_clear(renderer)

        // Update the rectangle position
        ffi/set_i32(rect_ptr, 0, updated_state.rect_x)
        ffi/set_i32(rect_ptr, 4, updated_state.rect_y)

        // Draw the rectangle
        let color = current_state.rect_color
        sdl_set_render_draw_color(renderer, color.r, color.g, color.b, 255) // Red color
        sdl_render_fill_rect(renderer, rect_ptr)

        // Present the updated screen
        sdl_render_present(renderer)

        sdl_delay(16)
        loop_it(buffer, renderer, rect_ptr, window)
    }
}

fn main() {

    // thread(repl/repl)
    thread(fn() {
        socket/server(12345, fn(data) {
            eval(data)
        })
    })
    println("Starting")
    sdl_init(32)
    println("SDL Initialized")

    let window = sdl_create_window("SDL2 Window", 100, 100, 640, 480, 4)
    println("Window Created")

    let renderer = sdl_create_renderer(window, -1, 2)
    println("Renderer Created")

    // Allocate memory for event buffer and rect
    let buffer = ffi/allocate(56)
    let rect_ptr = ffi/allocate(rect_size)

    // Set up rectangle dimensions: x=200, y=150, w=240, h=180
    ffi/set_i32(rect_ptr, 0, 200) // x
    ffi/set_i32(rect_ptr, 4, 150) // y
    ffi/set_i32(rect_ptr, 8, 240) // w
    ffi/set_i32(rect_ptr, 12, 180) // h

    loop_it(buffer, renderer, rect_ptr, window)

    println("Done")
}
