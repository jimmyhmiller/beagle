// A faster JSON parser with tail-recursion instead of while loops.
// Avoids building strings char by char. We detect spans via recursion,
// then use substring at the end to get the final string/number/etc.

namespace mutable

import "beagle.primitive" as primitive
import "persistent_map" as pm
import "persistent_vector" as pv

struct Tokenizer {
    input
    position
    length
}

fn makeTokenizer(input) {
    Tokenizer {
        input: input,
        position: 0,
        length: length(input)
    }
}

fn peek(tokenizer) {
    if tokenizer.position >= tokenizer.length {
        ""
    } else {
        tokenizer.input[tokenizer.position]
    }
}

fn consume(tokenizer) {
    primitive/set!(tokenizer.position, tokenizer.position + 1)
    tokenizer
}

// Tail-recursive function to skip all whitespace.
fn skipWhitespace(tokenizer) {
    if tokenizer.position >= tokenizer.length {
        tokenizer
    } else {
        let c = peek(tokenizer)
        if c == " " || c == "\n" || c == "\t" || c == "\r" {
            skipWhitespace(consume(tokenizer))
        } else {
            tokenizer
        }
    }
}

// Finds the position of the next quote, consuming until we see it or run out.
fn findStringEnd(tokenizer) {
    if tokenizer.position >= tokenizer.length {
        // Return current position (means no closing quote found)
        tokenizer.position
    } else {
        let c = peek(tokenizer)
        if c == "\"" {
            tokenizer.position
        } else {
            findStringEnd(consume(tokenizer))
        }
    }
}

fn parseString(tokenizer) {
    // consume the leading quote
    consume(tokenizer)
    let startPos = tokenizer.position
    let endPos = findStringEnd(tokenizer)
    let strVal = substring(tokenizer.input, startPos, endPos - startPos)
    // consume the closing quote if we haven't hit the end
    if tokenizer.position < tokenizer.length {
        consume(tokenizer)
    }
    strVal
}

fn isDigitChar(c) {
    c == "0" || c == "1" || c == "2" || c == "3" || c == "4" ||
    c == "5" || c == "6" || c == "7" || c == "8" || c == "9"
}

// Tail-recursive function to scan a number's span.
fn findNumberEnd(tokenizer) {
    if tokenizer.position >= tokenizer.length {
        tokenizer.position
    } else {
        let c = peek(tokenizer)
        // numeric, decimal point, or minus sign
        if isDigitChar(c) || c == "." || c == "-" {
            findNumberEnd(consume(tokenizer))
        } else {
            tokenizer.position
        }
    }
}

fn parseNumber(tokenizer) {
    let startPos = tokenizer.position
    let endPos = findNumberEnd(tokenizer)
    substring(tokenizer.input, startPos, endPos - startPos)
}

// Generic tail-recursive function to scan letters for booleans or null.
fn findWordEnd(tokenizer) {
    if tokenizer.position >= tokenizer.length {
        tokenizer.position
    } else {
        let c = peek(tokenizer)
        // a..z only
        if c >= "a" && c <= "z" {
            findWordEnd(consume(tokenizer))
        } else {
            tokenizer.position
        }
    }
}

fn parseBoolean(tokenizer) {
    let startPos = tokenizer.position
    let endPos = findWordEnd(tokenizer)
    substring(tokenizer.input, startPos, endPos - startPos)
}

fn parseNull(tokenizer) {
    let startPos = tokenizer.position
    let endPos = findWordEnd(tokenizer)
    substring(tokenizer.input, startPos, endPos - startPos)
}

// Dispatch to correct type based on first non-whitespace char
fn parseValue(tokenizer) {
    let t = skipWhitespace(tokenizer)
    let c = peek(t)
    if c == "{" {
        parseObject(t)
    } else if c == "[" {
        parseArray(t)
    } else if c == "\"" {
        parseString(t)
    } else if c == "t" || c == "f" {
        parseBoolean(t)
    } else if c == "n" {
        parseNull(t)
    } else {
        parseNumber(t)
    }
}

// Parse object by reading pairs until '}' or no more pairs
fn parseObject(tokenizer) {
    consume(tokenizer) // consume '{'
    let t = skipWhitespace(tokenizer)

    if peek(t) == "}" {
        consume(t) // consume '}'
        pm/map()
    } else {
        parseObjectLoop(t, pm/map())
    }
}

fn parseObjectLoop(tokenizer, outMap) {
    let t = skipWhitespace(tokenizer)
    // key must be string
    let key = parseString(t)
    let afterKey = skipWhitespace(t)
    // consume ':'
    consume(afterKey)
    let afterColon = skipWhitespace(afterKey)

    let val = parseValue(afterColon)
    let newMap = pm/assoc(outMap, key, val)

    let afterVal = skipWhitespace(afterColon)
    let c = peek(afterVal)
    if c == "," {
        // consume comma
        consume(afterVal)
        let nextT = skipWhitespace(afterVal)
        let c2 = peek(nextT)
        if c2 == "}" {
            // consume '}' if that's what's next
            consume(nextT)
            newMap
        } else {
            parseObjectLoop(nextT, newMap)
        }
    } else if c == "}" {
        consume(afterVal)
        newMap
    } else {
        // Malformed or trailing content, just return
        newMap
    }
}

// Parse array by reading comma-separated values until ']'
fn parseArray(tokenizer) {
    consume(tokenizer) // consume '['
    let t = skipWhitespace(tokenizer)
    if peek(t) == "]" {
        consume(t)
        pv/vec()
    } else {
        parseArrayLoop(t, pv/vec())
    }
}

fn parseArrayLoop(tokenizer, outVec) {
    let t = skipWhitespace(tokenizer)
    let val = parseValue(t)
    let newVec = pv/push(outVec, val)
    let afterVal = skipWhitespace(t)
    let c = peek(afterVal)

    if c == "," {
        // consume comma
        consume(afterVal)
        let nextT = skipWhitespace(afterVal)
        let c2 = peek(nextT)
        if c2 == "]" {
            consume(nextT)
            newVec
        } else {
            parseArrayLoop(nextT, newVec)
        }
    } else if c == "]" {
        consume(afterVal)
        newVec
    } else {
        newVec
    }
}

fn parseJSON(input) {
    let tokenizer = makeTokenizer(input)
    parseValue(tokenizer)
}

// Tail-recursive loop to parse repeatedly
fn parseNTimes(input, n) {
    if n == 0 {
        ""
    } else {
        parseJSON(input)
        parseNTimes(input, n - 1)
    }
}

fn main() {
    let input = "{\"key1\": \"value1\", \"key2\": [1, 2, 3], \"key3\": {\"key4\": 4}}"
    parseNTimes(input, 100000)
    "done"
}