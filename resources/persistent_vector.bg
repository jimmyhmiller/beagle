namespace persistent_vector
import "raw_mutable_array" as array
import "beagle.primitive" as primitive
import "beagle.builtin" as builtin


struct PersistentVector {
    count
    shift
    root
    tail
}

let EMPTY = PersistentVector {
    count: 0
    shift: 5
    root: array/new_array(0)
    tail: array/new_array(0)
}

fn tailOffset(vec) {
    if vec.count < 32 {
        0
    } else {
        ((vec.count - 1) >>> 5) << 5
    }
}

fn get_node_for_level(node, level, index) {
    // So I'm guessing my parsing code is parsing
    // this incorrectly if I don't assign a variable...
    if level == 0 {
        node
    } else {
        let new_node = array/read_field(node, (index >>> level) & 31)
        get_node_for_level(new_node, level - 5, index)
    }
}

fn get(vec, index) {
    if index < 0 || index >= vec.count {
        println(vec)
        primitive/panic("Index out of bounds")
    }

    if index >= tailOffset(vec) {
        array/read_field(vec.tail, index & 31)
    } else {
        let node = get_node_for_level(vec.root, vec.shift, index)
        array/read_field(node, index & 31)
    }
}

fn push(vec, value) {
    let tail_length = array/count(vec.tail)
    if tail_length < 32 {
        // Tail has space, create a new tail array with one extra slot
        let new_tail_size = tail_length + 1
        let new_tail = array/new_array(new_tail_size)
        // Copy existing tail into new tail
        array/copy_from_array_to(vec.tail, new_tail)
        // Add the new value
        array/write_field(new_tail, tail_length, value)
        // Return a new PersistentVector with the updated tail
        PersistentVector {
            count: vec.count + 1
            shift: vec.shift
            root: vec.root
            tail: new_tail
        }
    } else {
        // Tail is full, need to push into the tree
        let tail_node = vec.tail
        // Start a new tail with the new value
        let new_tail = array/new_array(1)
        array/write_field(new_tail, 0, value)
        let cnt_shifted = vec.count >>> 5
        let shifted_one = 1 << vec.shift

        if cnt_shifted > shifted_one {

            // Need to create a new root and increase shift
            let new_root_array = array/new_array(32)
            array/write_field(new_root_array, 0, vec.root)
            let new_path_node = new_path(vec, vec.shift, tail_node)
            array/write_field(new_root_array, 1, new_path_node)
            let new_root = new_root_array
            // Return a new PersistentVector with the increased shift and new root
            PersistentVector {
                count: vec.count + 1
                shift: vec.shift + 5
                root: new_root
                tail: new_tail
            }
        } else {
            // Insert into existing tree
            
            let new_root = push_tail(vec, vec.shift, vec.root, tail_node)
            // Return a new PersistentVector with the same shift and the new root
            PersistentVector {
                count: vec.count + 1
                shift: vec.shift
                root: new_root
                tail: new_tail
            }
        }
    }
}

fn new_path(vec, level, node) {
    if level == 0 {
        node
    } else {
        let path = array/new_array(32)
        array/write_field(path, 0, new_path(vec, level - 5, node))
        path
    }
}


fn push_tail(vec, level, parent, tail_node) {
    let new_array = array/new_array(32)
    if array/is_array(parent) == false {
        primitive/panic("Parent is not an array")
    }
    let new_parent = array/copy_from_array_to(parent, new_array)
    let sub_index = ((vec.count - 1) >>> level) & 31

    let updated_node = if level == 5 {
        // Level is 5, insert the tail node here
        array/write_field(new_parent, sub_index, tail_node)
        new_parent
    } else {
        let child = array/read_field(parent, sub_index)
        let new_child = if child != null {
            push_tail(vec, level - 5, child, tail_node)
        } else {
            new_path(vec, level - 5, tail_node)
        }
        array/write_field(new_parent, sub_index, new_child)
        new_parent
    }
    updated_node
}

fn assoc(vec, index, value) {
    if index < 0 || index >= vec.count {
        primitive/panic("Index out of bounds")
    }

    if index >= tailOffset(vec) {
        // Update the tail
        let new_tail = array/copy_array(vec.tail)
        array/write_field(new_tail, index & 31, value)
        PersistentVector {
            count: vec.count
            shift: vec.shift
            root: vec.root
            tail: new_tail
        }
    } else {
        // Update the tree
        let new_root = doAssoc(vec, vec.shift, vec.root, index, value)
        PersistentVector {
            count: vec.count
            shift: vec.shift
            root: new_root
            tail: vec.tail
        }
    }
}

fn doAssoc(vec, level, node, index, value) {
    let new_node = array/copy_array(node)
    if level == 0 {
        array/write_field(new_node, index & 31, value)
        new_node
    } else {
        let sub_index = (index >>> level) & 31
        let child = array/read_field(node, sub_index)
        let new_child = doAssoc(vec, level - 5, child, index, value)
        array/write_field(new_node, sub_index, new_child)
        new_node
    }
}


fn fill_vec_n_helper(vec, i, n) {
    if i == n {
        vec
    } else {
        let new_vec = push(vec, i)
        fill_vec_n_helper(new_vec, i + 1, n)
    }
}

fn fill_vec_n(n) {
    fill_vec_n_helper(EMPTY, 0, n)
}

fn get_and_verify(vec, index) {
    let value = get(vec, index)
    if value != index {
        println("Error: Expected ")
        println(index)
        println(" but got ")
        println(value)
        primitive/panic("Value mismatch")
    }
    if index != vec.count - 1 {
        get_and_verify(vec, index + 1)
    } else {
        "done"
    }
}

fn make_vec_of_every_size_and_verify(n) {
    if n == 0 {
        "worked!"
    } else {
        let vec = fill_vec_n(n)
        get_and_verify(vec, 0)
        make_vec_of_every_size_and_verify(n - 1)
    }
}

fn count(vec) {
    vec.count
}


// TODO: I have a problem with arguments being passed properly.
// If you swap arr and vec here, I overwrite x2.
// I need to preserve that value, but I don't feel like doing that right now
// so I'm just going to move them for the moment.
fn to_array_helper(arr, i, vec) {
    if i == count(vec) {
        arr
    } else {
        array/write_field(arr, i, get(vec, i))
        to_array_helper(arr, i + 1, vec)
    }
}

fn to_array(vec) {
    let arr = array/new_array(count(vec))
    to_array_helper(arr, 0, vec)
}

fn vec() {
    EMPTY
}

fn from_array(arr) {
    from_array_helper(vec(), arr, 0, array/count(arr))
}

fn from_array_helper(v, arr, i, n) {
    if i == n {
        v
    } else {
        let new_vec = push(v, array/read_field(arr, i))
        from_array_helper(new_vec, arr, i + 1, n)
    }
}

fn rest(vec) {
    if vec.count <= 1 {
        EMPTY
    } else {
        rest_helper(EMPTY, vec, 1, vec.count)
    }
}

fn rest_helper(new_vec, orig_vec, i, n) {
    if i == n {
        new_vec
    } else {
        let value = get(orig_vec, i)
        let updated_vec = push(new_vec, value)
        rest_helper(updated_vec, orig_vec, i + 1, n)
    }
}

fn first(vec) {
    if vec.count == 0 {
        null
    } else {
        get(vec, 0)
    }
}



extend PersistentVector with Indexed {
    fn get(vec, index) {
        get(vec, index)
    }
}

extend PersistentVector with Push {
    fn push(vec, value) {
        push(vec, value)
    }
}

extend PersistentVector with Format {
    fn format(vec, depth) {
        if vec.count == 0 {
            "[]"
        } else {
            format_vector(vec, 0, "[")
        }
    }
}

fn format_vector(vec, idx, acc) {
    if idx >= vec.count {
        acc ++ "]"
    } else {
        let val = get(vec, idx)
        let val_str = format(val, 1)
        
        let new_acc = if idx == 0 {
            acc ++ val_str
        } else {
            acc ++ ", " ++ val_str
        }
        
        format_vector(vec, idx + 1, new_acc)
    }
}

extend PersistentVector with Length {
    fn length(vec) {
        count(vec)
    }
}


extend PersistentVector with Associable {
    fn assoc(vec, index, value) {
        assoc(vec, index, value)
    }
}

extend PersistentVector with Rest {
    fn rest(vec) {
        rest(vec)
    }
}

extend PersistentVector with First {
    fn first(vec) {
        first(vec)
    }
}



fn main() {
    let vec1 = vec()
    println(vec1)
    gc()
    println(vec1)
    println(make_vec_of_every_size_and_verify(1000))
    gc()
    gc()
    println(make_vec_of_every_size_and_verify(1000))
    let vec2 = fill_vec_n(10);
    let array2 = to_array(vec2)
    println(array2)
    
    // Test rest function
    let empty_vec = vec()
    println(rest(empty_vec))
    
    let single_vec = push(vec(), 42)
    println(rest(single_vec))
    
    let vec3 = fill_vec_n(5)
    println(vec3)
    let rest_vec = rest(vec3)
    println(rest_vec)
    
    // Test first function
    let empty_vec = vec()
    println(first(empty_vec))
    
    let single_vec = push(vec(), 42)
    println(first(single_vec))
    
    println(first(vec3))
    
    "done"
}


// Expect
// []
// []
// worked!
// worked!
// [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]
// []
// []
// [0, 1, 2, 3, 4]
// [1, 2, 3, 4]
// null
// 42
// 0
// done
