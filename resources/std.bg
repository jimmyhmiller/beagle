namespace beagle.core;
import "beagle.primitive" as primitive
import "beagle.builtin" as builtin
// TODO: I need to figure out how I deal with the circular nature
// of having persistent vector not be in this namespace
// One answer is to have dynamic imports
// so that after I define the things persistent vector depends on
// I can import it dynamically

// I need to think about execution order as well
// If I import a namespace, does that namespaces top level
// get called before I compile the current namespace
// It seems like it should.
// But I need to do that on the calling thread
// so I will need some back and forth going on there

// TODO: This is hack because 0 is making the fast path cache activate
// fix by changing id or filling the cache
struct NEVER{}

struct Struct {
    name
    id
}

// TODO: This is a bit gross
// I definitely need something like 
// javascript Symbol
// or some way to really uniquely
// identify a type
let String = Struct {
    name: "String",
    id: -1
}

struct Protocol {
    name
}

protocol Indexed {
    fn get(coll, index)
}

protocol Push {
    fn push(coll, value)
}

protocol Length {
    fn length(coll)
}


// This may seem weird
// but we need our runtime to know
// how to call a function if it is a closure
// or a regular function
// this makes that idea simple
fn __call_fn(f) { f() }

struct Atom {
    value
}

fn deref(atom) {
    // assert!(atom is Atom)
    primitive/deref(atom)
}

fn swap!(atom, f) {
    let initial = deref(atom);
    let new = f(initial);
    let result = compare_and_swap!(atom, initial, new);
    if result {
        new
    } else {
        swap!(atom, f)
    }
}

fn reset!(atom, value) {
    // assert!(atom is Atom)
    primitive/reset!(atom, value)
}

fn compare_and_swap!(atom, old, new) {
    // assert!(atom is Atom)
    primitive/compare_and_swap!(atom, old, new)
}

fn atom(value) {
    // TODO: Allow punning
    Atom { value: value }
}

// TODO: If I move the || on the next line,
// my parser is unhappy
// TODO: Need to make sure type is instance_of Struct
// but how do I do that in a reasonable way?
fn instance_of(value, type) {
    (primitive/is_object(value) && 
        (
            primitive/read_struct_id(value) == type.id || 
            (type.id == -1 && primitive/read_type_id(value) == 2) 
        )) || (type.id == -1 && primitive/is_string_constant(value))
}


extend String with Indexed {
    fn get(str, i) {
        builtin/get_string_index(str, i)
    }
}

extend String with Length {
    fn length(str) {
        builtin/get_string_length(str)
    }
}


// // TODO: Need a way to re-export rather than wrap
// fn get(coll, i) {
//     persistent_vector/get(coll, i)
// }

// fn push(coll, value) {
//     persistent_vector/push(coll, value)
// }

