namespace array_literals
import "persistent_vector" as vector

struct ExampleStruct {
    value
}

fn with_side_effect(x) {
    println(x)
    x
}

fn main() {
    let x = [1, 2, 3]
    println(x)
    let y = [2 + 2 - 3, ExampleStruct { value: 2 }, with_side_effect(3), with_side_effect(4)]
    println(y)
    let q = []
    println(q)
    let r = push(q, 1)
    println(r)
    println(get(r, 0))
    println(r[0])
    let big_array = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,19,20,21,22,23,24]
    println(big_array)
    "done"
}


// Expect
// PersistentVector { count: 3, shift: 5, root: [  ], tail: [ 1, 2, 3 ] }
// 3
// 4
// PersistentVector { count: 4, shift: 5, root: [  ], tail: [ 1, ExampleStruct { value: 2 }, 3, 4 ] }
// PersistentVector { count: 0, shift: 5, root: [  ], tail: [  ] }
// PersistentVector { count: 1, shift: 5, root: [  ], tail: [ 1 ] }
// 1
// 1
// PersistentVector { count: 23, shift: 5, root: [  ], tail: [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24 ] }
// done