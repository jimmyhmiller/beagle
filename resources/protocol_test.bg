namespace protocol_test

import "persistent_vector" as vector
import "beagle.builtin" as builtin
import "beagle.primitive" as primitive



struct Point {
    x
    y
}

struct Size {
    width
    height
}

protocol Axis {
    fn get_x(self)
    fn get_y(self)
}


extend Point with Axis {
    fn get_x(self) {
        self.x
    }

    fn get_y(self) {
        self.y
    }
}

extend Size with Axis {
    fn get_x(self) {
        self.width
    }

    fn get_y(self) {
        self.height
    }
}

fn main() {
    println(vector/PersistentVector)
    println(Indexed)
    let x = [2];
    println(x[0])
    println(primitive/read_struct_id(x))
    println(instance_of(x, vector/PersistentVector))
    println(instance_of(2, vector/PersistentVector))


    let point = Point {
        x: 1,
        y: 2
    }

    let size = Size {
        width: 3,
        height: 4
    }

    println(get_x(point))
    println(get_y(point))
    println(get_x(size))
    println(get_y(size))
    "done"
}
