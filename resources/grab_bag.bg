namespace grab_bag

import "binary_tree" as binary_tree


// Intentionally after to make sure
// declaration order doesn't matter
struct TreeNode {
    left
    right
}



fn a() {
    b()
}

fn b() {
    42
}


struct Range {
    start
    end
}

struct OtherStruct {
    x
    y
}

fn range(start, end) {
    Range {
        start: start,
        end: end
    }
}

fn other_struct(x, y) {
    OtherStruct {
        x: x,
        y: y
    }
}


fn get_range_start() {
    let range = range(0, 10);
    range.start
}

fn simpleMakeTree() {
    println("simpleMakeTree")
    TreeNode {
        left: null,
        right: null
    }
}

fn testMakeTree() {
    simpleMakeTree()
    TreeNode {
        left: simpleMakeTree(),
        right: simpleMakeTree()
    }
}

fn testGcWithTree(n) {
    binary_tree/bottomUpTree(n)
}

fn testGcSimple(n) {
    println("Starting garbage")
    let garbage = TreeNode {
        left: null
        right: null
    }
    println("garbage")

    let x = TreeNode {
        left: null
        right: null
    }

    println("x")

    let y = TreeNode {
        left: x,
        right: x
    }

    println("y")

    let z = TreeNode {
        left: y,
        right: y,
    }

    println("z")
    println(z)
    z
}

fn testGcNested(n) {
    let y = testGcSimple()

    println("done with call")

    let z = TreeNode {
        left: y
        right: y
    }
    println("z2")

    let q = TreeNode {
        left: z
        right: z
    }

    println("q")

    y
}

fn testGc(n) {
    if n > 10 {
        0
    } else {
        let x = TreeNode {
            left: null
            right: null
        }
        1 + testGc(n + 1)

        let y = TreeNode {
            left: x,
            right: x
        }

        1 + testGc(n + 1)

        let z = TreeNode {
            left: y,
            right: y,
        }
        println(x)
        println(y)
        println(z)
        0
    }
}

fn simpleFunctionWithLocals() {
    let x = 2;
    let y = 3;
    x + y
}

fn math_with_parens() {
    (1 + 2) * 3
}

fn log(x) {
    println(x)
    x
}

fn structs_dont_care_about_order() {
    OtherStruct {
        y: log(2),
        x: log(1)
    }
}


fn tail_recursive(n, accum) {
    if n == 0 {
        accum
    } else {
        // This will blow the stack if we break tail recursion
        let x = OtherStruct { x: 1, y: 2 }
        let y = OtherStruct { x: 1, y: 2 }
        let z = OtherStruct { x: 1, y: 2 }
        let a = OtherStruct { x: 1, y: 2 }
        let b = OtherStruct { x: 1, y: 2 }
        let c = OtherStruct { x: 1, y: 2 }
        let d = OtherStruct { x: 1, y: 2 }
        let e = OtherStruct { x: 1, y: 2 }
        tail_recursive(n - 1, accum + n)
    }
}


fn main() {
    println(simpleFunctionWithLocals())
    println(testGc(8))
    println(testGcSimple(3))
    println(testGcNested(3))
    println(testGcWithTree(3))
    println(testMakeTree())
    println(get_range_start())
    println(range(0, 10))
    println(a())
    println(b())
    println(math_with_parens())
    println(structs_dont_care_about_order())
    println(tail_recursive(300000, 0))
}


// Expect
// 5
// TreeNode { left: null, right: null }
// TreeNode { left: TreeNode { left: null, right: null }, right: TreeNode { left: null, right: null } }
// TreeNode { left: TreeNode { left: TreeNode { left: null, right: null }, right: TreeNode { left: null, right: null } }, right: TreeNode { left: TreeNode { left: null, right: null }, right: TreeNode { left: null, right: null } } }
// TreeNode { left: null, right: null }
// TreeNode { left: TreeNode { left: null, right: null }, right: TreeNode { left: null, right: null } }
// TreeNode { left: TreeNode { left: TreeNode { left: null, right: null }, right: TreeNode { left: null, right: null } }, right: TreeNode { left: TreeNode { left: null, right: null }, right: TreeNode { left: null, right: null } } }
// TreeNode { left: null, right: null }
// TreeNode { left: TreeNode { left: null, right: null }, right: TreeNode { left: null, right: null } }
// TreeNode { left: TreeNode { left: TreeNode { left: null, right: null }, right: TreeNode { left: null, right: null } }, right: TreeNode { left: TreeNode { left: null, right: null }, right: TreeNode { left: null, right: null } } }
// TreeNode { left: null, right: null }
// TreeNode { left: TreeNode { left: null, right: null }, right: TreeNode { left: null, right: null } }
// TreeNode { left: TreeNode { left: TreeNode { left: null, right: null }, right: TreeNode { left: null, right: null } }, right: TreeNode { left: TreeNode { left: null, right: null }, right: TreeNode { left: null, right: null } } }
// TreeNode { left: null, right: null }
// TreeNode { left: TreeNode { left: null, right: null }, right: TreeNode { left: null, right: null } }
// TreeNode { left: TreeNode { left: TreeNode { left: null, right: null }, right: TreeNode { left: null, right: null } }, right: TreeNode { left: TreeNode { left: null, right: null }, right: TreeNode { left: null, right: null } } }
// TreeNode { left: null, right: null }
// TreeNode { left: TreeNode { left: null, right: null }, right: TreeNode { left: null, right: null } }
// TreeNode { left: TreeNode { left: TreeNode { left: null, right: null }, right: TreeNode { left: null, right: null } }, right: TreeNode { left: TreeNode { left: null, right: null }, right: TreeNode { left: null, right: null } } }
// TreeNode { left: null, right: null }
// TreeNode { left: TreeNode { left: null, right: null }, right: TreeNode { left: null, right: null } }
// TreeNode { left: TreeNode { left: TreeNode { left: null, right: null }, right: TreeNode { left: null, right: null } }, right: TreeNode { left: TreeNode { left: null, right: null }, right: TreeNode { left: null, right: null } } }
// 0
// Starting garbage
// garbage
// x
// y
// z
// TreeNode { left: TreeNode { left: TreeNode { left: null, right: null }, right: TreeNode { left: null, right: null } }, right: TreeNode { left: TreeNode { left: null, right: null }, right: TreeNode { left: null, right: null } } }
// TreeNode { left: TreeNode { left: TreeNode { left: null, right: null }, right: TreeNode { left: null, right: null } }, right: TreeNode { left: TreeNode { left: null, right: null }, right: TreeNode { left: null, right: null } } }
// Starting garbage
// garbage
// x
// y
// z
// TreeNode { left: TreeNode { left: TreeNode { left: null, right: null }, right: TreeNode { left: null, right: null } }, right: TreeNode { left: TreeNode { left: null, right: null }, right: TreeNode { left: null, right: null } } }
// done with call
// z2
// q
// TreeNode { left: TreeNode { left: TreeNode { left: null, right: null }, right: TreeNode { left: null, right: null } }, right: TreeNode { left: TreeNode { left: null, right: null }, right: TreeNode { left: null, right: null } } }
// TreeNode { left: TreeNode { left: TreeNode { left: TreeNode { left: null, right: null }, right: TreeNode { left: null, right: null } }, right: TreeNode { left: TreeNode { left: null, right: null }, right: TreeNode { left: null, right: null } } }, right: TreeNode { left: TreeNode { left: TreeNode { left: null, right: null }, right: TreeNode { left: null, right: null } }, right: TreeNode { left: TreeNode { left: null, right: null }, right: TreeNode { left: null, right: null } } } }
// simpleMakeTree
// simpleMakeTree
// simpleMakeTree
// TreeNode { left: TreeNode { left: null, right: null }, right: TreeNode { left: null, right: null } }
// 0
// Range { start: 0, end: 10 }
// 42
// 42
// 9
// 2
// 1
// OtherStruct { x: 1, y: 2 }
// 45000150000
// null