namespace test_yield
import "beagle.debug" as debug


// TODO: This breaks when I do release :)

fn test_yield() {
    let result = yield("We yielded something!")
    result
}

fn inner_function() {
    let x = test_yield()
    println("Inner function")
    x
}

fn main() {
    delimit {
        let result = inner_function()
        print("Returned from test_yield: ")
        println(result)
    } handle (value, resume) {
        // TODO: resume needs to be a closure that we can
        // call that will do restore_continuation with the correct index
        print("Handler caught: ")
        println(value)
        resume("BAM!")
        "handled"
    }
    "done"
}

// Exp ect
// Handler caught: We yielded something!
// Returned from test_yield: BAM!
// done
