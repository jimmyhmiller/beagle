namespace raw_mutable_array
import "beagle.builtin" as builtin
import "beagle.primitive" as primitive

fn allocate_array_unsafe(size) {
    builtin/allocate(size)
}

fn read_field_unsafe(array, index) {
    primitive/read_field(array, index)
}

fn write_field_unsafe(array, index, value) {
    primitive/write_field(array, index, value)
}

fn write_field(array, index, value) {
    // TODO: I need || (or should it be "or")
    if index < 0 {
        primitive/panic("Index out of bounds")
    }
    if index >= primitive/size(array) {
        primitive/panic("Index out of bounds")
    }
    write_field_unsafe(array, index, value)
}

fn read_field(array, index) {
    if index < 0 {
        primitive/panic("Index out of bounds")
    }
    if index >= primitive/size(array) {
        primitive/panic("Index out of bounds")
    }
    read_field_unsafe(array, index)
}

fn new_array(size) {
    if size < 0 {
        primitive/panic("Negative size")
    }
    if size > 256 {
        primitive/panic("Size too large")
    }
    let array = allocate_array_unsafe(size)
    primitive/write_type_id(array, 1)
    array
}


struct ExampleStruct {
    value
}

fn copy_array(array) {
    let new_array = builtin/copy_object(array)
    new_array
}

fn allocate_array_and_return() {
    let example_struct = ExampleStruct {
        value: "Example Struct Value2"
    }
    let array = new_array(1)
    write_field(array, 0, example_struct)
    array
}

fn main() {
    let array = new_array(10)
    primitive/write_type_id(array, 1)
    primitive/write_field(array, 0, 1)
    primitive/write_field(array, 1, 2)
    primitive/write_field(array, 2, 3)
    primitive/write_field(array, 3, 4)
    primitive/write_field(array, 4, 5)
    primitive/write_field(array, 5, 6)
    primitive/write_field(array, 6, 7)
    primitive/write_field(array, 7, 8)
    primitive/write_field(array, 8, 9)
    primitive/write_field(array, 9, 10)

    let copied_array = copy_array(array)
    write_field(copied_array, 0, 42);
    gc()
    gc()
    gc()
    println(array)
    println(copied_array)



    let my_array = allocate_array_and_return()
    println(primitive/read_field(array, 0))
    println(array)
    println(primitive/size(array))

    let example_struct = ExampleStruct {
        value: "Example Struct Value"
    }
    let array = builtin/allocate(1)
    primitive/write_type_id(array, 1)
    primitive/write_field(array, 0, example_struct)
    println(primitive/read_field(array, 0).value)
    println(array)
    gc()
    gc()
    gc()
    println(array)
    println(my_array)

    read_field(array, 0)
    
    "done"
}

// Expect
// [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
// [ 42, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
// 1
// [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
// 10
// Example Struct Value
// [ ExampleStruct { value: Example Struct Value } ]
// [ ExampleStruct { value: Example Struct Value } ]
// [ ExampleStruct { value: Example Struct Value2 } ]
// done