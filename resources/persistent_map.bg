namespace persistent_map
import "beagle.builtin" as builtin
import "beagle.primitive" as primitive
import "raw_mutable_array" as array


// TODO: ChatGPT wrote this
// It's bad
// Going to rewrite

struct PersistentMapStruct {
    count
    root
}

struct PairNode {
    key
    val
}

struct BitmapIndexedNode {
    bit_map
    children
}

struct CollisionNode {
    hash
    c
    kv_arr
}

let empty = PersistentMapStruct {
    count: 0
    root: null
}

fn map() {
    empty
}

fn count(pm) {
    pm.count
}

fn mask(h, s) {
    (h >>> s) & 31
}

fn bitpos(x) {
    1 << x
}

fn is_bitmap_indexed_node(n) {
    instance_of(n, BitmapIndexedNode)
}

fn is_collision_node(n) {
    instance_of(n, CollisionNode)
}

fn is_pair_node(n) {
    instance_of(n, PairNode)
}

fn new_pair_node(k, v) {
    PairNode {
        key: k
        val: v
    }
}

fn new_bitmap_indexed_node(bm, child_arr) {
    BitmapIndexedNode {
        bit_map: bm
        children: child_arr
    }
}

fn new_collision_node(h, c, kv_arr) {
    CollisionNode {
        hash: h
        c: c
        kv_arr: kv_arr
    }
}

fn collision_count(n) {
    n.c
}

fn collision_hash(n) {
    n.hash
}

fn node_bitmap(n) {
    n.bit_map
}

fn node_children_array(n) {
    n.children
}

fn collision_key(n, i) {
    array/read_field(n.kv_arr, 2 * i)
}

fn collision_val(n, i) {
    array/read_field(n.kv_arr, 2 * i + 1)
}

fn index_from_bitmap(bm, bit) {
    popcount_below(bm & (bit - 1))
}

fn popcount_below(x) {
    if x == 0 {
        0
    } else {
        1 + popcount_below(x & (x - 1))
    }
}

fn make_kv_array(k, v) {
    let arr = array/new_array(2)
    array/write_field(arr, 0, k)
    array/write_field(arr, 1, v)
    arr
}

// main entry
fn assoc(pm, k, v) {
    let h = builtin/hash(k)
    if pm.root == null {
        let new_root = new_collision_node(h, 1, make_kv_array(k, v))
        PersistentMapStruct {
            count: 1
            root: new_root
        }
    } else {
        let added_leaf_box = array/new_array(1)
        array/write_field(added_leaf_box, 0, 0)
        let new_root = assoc_node(pm.root, 0, h, k, v, added_leaf_box)
        let old_val = array/read_field(added_leaf_box, 0)
        PersistentMapStruct {
            count: pm.count + (if old_val == 1 { 1 } else { 0 })
            root: new_root
        }
    }
}

fn assoc_node(n, shift, h, k, v, added_leaf_box) {
    if n == null {
        // brand-new node
        assoc_bitmap_node(null, shift, h, k, v, added_leaf_box)
    } else if is_bitmap_indexed_node(n) {
        assoc_bitmap_node(n, shift, h, k, v, added_leaf_box)
    } else if is_collision_node(n) {
        assoc_collision_node(n, shift, h, k, v, added_leaf_box)
    } else if is_pair_node(n) {
        assoc_key_val_node(n, shift, h, k, v, added_leaf_box)
    } else {
        println(n)
        builtin/throw_error()
    }
}

fn assoc_bitmap_node(n, shift, h, k, v, added_leaf_box) {
    if n == null {
        // brand-new single-child node
        let bit = bitpos(mask(h, shift))
        let arr = array/new_array(1)
        array/write_field(arr, 0, new_pair_node(k, v))
        array/write_field(added_leaf_box, 0, 1) // added_leaf_box is not an array
        new_bitmap_indexed_node(bit, arr)
    } else if is_bitmap_indexed_node(n) == false {
        // If n is not actually a BitmapIndexedNode, handle it with assoc_node
        assoc_node(n, shift, h, k, v, added_leaf_box)
    } else {
        // normal path for BitmapIndexedNode
        let bm = node_bitmap(n)
        let bit = bitpos(mask(h, shift))
        let idx = index_from_bitmap(bm, bit)
        let ex = (bm & bit) != 0
        let child_arr = node_children_array(n)
        let sub_n = if ex {
            array/read_field(child_arr, idx)
        } else {
            null
        }
        let new_sub = assoc_node(sub_n, shift + 5, h, k, v, added_leaf_box)
        if ex {
            // replace existing child
            let new_child_arr = array/copy_array(child_arr)
            array/write_field(new_child_arr, idx, new_sub)
            new_bitmap_indexed_node(bm, new_child_arr)
        } else {
            // add a new child
            let new_len = array/count(child_arr) + 1
            let inserted = array/new_array(new_len)
            insert_child(child_arr, inserted, new_sub, idx)
            let new_bm = bm | bit
            new_bitmap_indexed_node(new_bm, inserted)
        }
    }
}

// Insert a single new_node into an array of children at position idx
fn insert_child(old_arr, new_arr, new_node, idx) {
    let l_old = array/count(old_arr)
    copy_prefix(old_arr, new_arr, 0, idx)
    array/write_field(new_arr, idx, new_node)
    copy_suffix(old_arr, new_arr, idx, l_old)
}

fn copy_prefix(old_arr, new_arr, i, limit) {
    if i == limit {
        new_arr
    } else {
        array/write_field(new_arr, i, array/read_field(old_arr, i))
        copy_prefix(old_arr, new_arr, i + 1, limit)
    }
}

fn copy_suffix(old_arr, new_arr, start, l_old) {
    let i = start
    copy_suffix_loop(old_arr, new_arr, i, l_old)
}

fn copy_suffix_loop(old_arr, new_arr, i, l_old) {
    if i == l_old {
        new_arr
    } else {
        array/write_field(new_arr, i + 1, array/read_field(old_arr, i))
        copy_suffix_loop(old_arr, new_arr, i + 1, l_old)
    }
}

// Handling a single PairNode
fn assoc_key_val_node(pair, shift, h, k, v, added_leaf_box) {
    let ek = pair.key
    let ev = pair.val
    let eh = builtin/hash(ek)
    if eq(ek, k) {
        // Overwrite existing
        new_pair_node(ek, v)
    } else {
        if eh == h {
            // Same hash -> turn into a CollisionNode
            let new_coll = new_collision_node(h, 2, make_kv_array(ek, ev))
            array/write_field(new_coll.kv_arr, 2, k)
            array/write_field(new_coll.kv_arr, 3, v)
            array/write_field(added_leaf_box, 0, 1)
            new_coll
        } else {
            // Different hash -> create minimal bitmap node for the two distinct keys
            let new_n = assoc_bitmap_node(null, shift, eh, ek, ev, added_leaf_box)
            array/write_field(added_leaf_box, 0, 0)
            assoc_bitmap_node(new_n, shift, h, k, v, added_leaf_box)
        }
    }
}

// Handling a CollisionNode
fn assoc_collision_node(n, shift, h, k, v, added_leaf_box) {
    // If n turned out not to be a CollisionNode for some reason, delegate
    if is_collision_node(n) == false {
        assoc_bitmap_node(n, shift, h, k, v, added_leaf_box)
    } else {
        let nh = collision_hash(n)
        if nh == h {
            let ccount = collision_count(n)
            let idx = find_collision_key_index(n, ccount, k)
            if idx >= 0 {
                // Overwrite existing
                let new_coll = new_collision_node(nh, ccount, array/copy_array(n.kv_arr))
                array/write_field(new_coll.kv_arr, 2 * idx + 1, v)
                new_coll
            } else {
                // Grow collision array
                let new_count = ccount + 1
                let old_kv = n.kv_arr
                let old_len = array/count(old_kv)
                let new_size = old_len + 2
                let new_kv = array/new_array(new_size)
                copy_collision_kv(old_kv, new_kv, 0, old_len)
                array/write_field(new_kv, 2 * ccount, k)
                array/write_field(new_kv, 2 * ccount + 1, v)
                let new_coll = new_collision_node(nh, new_count, new_kv)
                array/write_field(added_leaf_box, 0, 1)
                new_coll
            }
        } else {
            // Convert collision to a bitmap node if hash differs
            convert_collision_to_bitmap(n, shift, h, k, v, added_leaf_box)
        }
    }
}

fn find_collision_key_index(n, ccount, k) {
    find_collision_key_index_loop(n, k, 0, ccount)
}

fn find_collision_key_index_loop(n, k, i, ccount) {
    if i == ccount {
        -1
    } else {
        let kk = collision_key(n, i)
        if eq(kk, k) {
            i
        } else {
            find_collision_key_index_loop(n, k, i + 1, ccount)
        }
    }
}

fn copy_collision_kv(old_kv, new_kv, i, limit) {
    if i == limit {
        new_kv
    } else {
        array/write_field(new_kv, i, array/read_field(old_kv, i))
        copy_collision_kv(old_kv, new_kv, i + 1, limit)
    }
}

// Convert collisions to a bitmap node when a new hash doesn't match
fn convert_collision_to_bitmap(n, shift, h, k, v, added_leaf_box) {
    let ccount = collision_count(n)
    if ccount == 1 {
        // easy case: single pair -> create 2 children in a bitmap
        let k0 = collision_key(n, 0)
        let v0 = collision_val(n, 0)
        let h0 = collision_hash(n)
        let new_n = assoc_bitmap_node(null, shift, h0, k0, v0, added_leaf_box)
        array/write_field(added_leaf_box, 0, 0)
        assoc_bitmap_node(new_n, shift, h, k, v, added_leaf_box)
    } else {
        // build a small bitmap node with up to 2 children
        let node_h = collision_hash(n)
        let sub_index1 = mask(node_h, shift)
        let sub_index2 = mask(h, shift)
        let bit1 = bitpos(sub_index1)
        let bit2 = bitpos(sub_index2)
        let combo = bit1 | bit2
        let child_size = if bit1 == bit2 { 1 } else { 2 }
        let child_arr = array/new_array(child_size)

        if sub_index1 == sub_index2 {
            // same bit -> keep collisions together
            let new_coll = new_collision_node(node_h, collision_count(n), extract_pairs(n))
            array/write_field(box_, 0, 1)
            let updated = assoc_collision_node(new_coll, shift + 5, builtin/hash(k), k, v, box_)
            array/write_field(child_arr, 0, updated)
            child_arr
        } else {
            // distinct bits -> 2 children
            if s1 < s2 {
                array/write_field(child_arr, 0, n)
                let nc = new_collision_node(builtin/hash(k), 1, make_kv_array(k, v))
                array/write_field(child_arr, 1, nc)
                array/write_field(box_, 0, 0)
                child_arr
            } else {
                let nc = new_collision_node(builtin/hash(k), 1, make_kv_array(k, v))
                array/write_field(child_arr, 0, nc)
                array/write_field(child_arr, 1, n)
                array/write_field(box_, 0, 0)
                child_arr
            }
        }
        new_bitmap_indexed_node(combo, child_arr)
    }
}


fn extract_pairs(n) {
    let ccount = collision_count(n)
    let pc = 2 * ccount
    let out = array/new_array(pc)
    copy_collision_array_no_hdr(n, out, ccount, 0)
}

fn copy_collision_array_no_hdr(n, out, ccount, i) {
    if i == ccount {
        out
    } else {
        array/write_field(out, 2 * i, collision_key(n, i))
        array/write_field(out, 2 * i + 1, collision_val(n, i))
        copy_collision_array_no_hdr(n, out, ccount, i + 1)
    }
}

// lookup
fn get(pm, k) {
    if pm.root == null {
        null
    } else {
        let h = builtin/hash(k)
        find_node(pm.root, k, h, 0)
    }
}

fn find_node(n, k, h, shift) {
    if n == null {
        null
    } else if is_bitmap_indexed_node(n) {
        find_bitmap_node(n, k, h, shift)
    } else if is_collision_node(n) {
        find_collision_node(n, k, h)
    } else if is_pair_node(n) {
        let ck = n.key
        let cv = n.val
        if eq(k, ck) {
            cv
        } else {
            null
        }
    } else {
        // fallback
        null
    }
}

fn find_bitmap_node(n, k, h, shift) {
    let bm = node_bitmap(n)
    let bit = bitpos(mask(h, shift))
    if (bm & bit) == 0 {
        null
    } else {
        let idx = index_from_bitmap(bm, bit)
        let child = array/read_field(n.children, idx)
        find_node(child, k, h, shift + 5)
    }
}

fn find_collision_node(n, k, h) {
    let nh = collision_hash(n)
    if nh == h {
        let ccount = collision_count(n)
        lookup_collision(n, k, 0, ccount)
    } else {
        null
    }
}

fn lookup_collision(n, k, i, ccount) {
    if i == ccount {
        null
    } else {
        let ck = collision_key(n, i)
        let cv = collision_val(n, i)
        if eq(ck, k) {
            cv
        } else {
            lookup_collision(n, k, i + 1, ccount)
        }
    }
}

// TODO: Remove this
fn eq(a, b) {
    a == b
}

fn insert_many(pm, i, max) {
    if i == max {
        pm
    } else {
        let pm2 = assoc(pm, i, i)
        insert_many(pm2, i + 1, max)
    }
}

fn main() {
    
    let pm = map()
    println(pm) 

    let pm2 = assoc(pm, "foo", 1)
    println(get(pm2, "foo")) 
    println(count(pm2))      
    
    let pm3 = assoc(pm2, "bar", 100)
    println(get(pm3, "foo")) 
    println(get(pm3, "bar")) 
    println(count(pm3))      

    let pm4 = assoc(pm3, "bar", 101)
    println(get(pm4, "bar")) 
    println(count(pm4))      

    let pm5 = assoc(pm4, "baz", 999)
    let pm6 = assoc(pm5, "qux", 777)
    println(get(pm6, "baz")) 
    println(get(pm6, "qux")) 
    println(count(pm6))      
    
    let val_missing = get(pm6, "no-such-key")
    println(val_missing) 

    let times = 10
    let pm7 = insert_many(pm6, 0, times)
    println(count(pm7)) 

    println(get(pm7, 0))  
    println(get(pm7, 9))  
    println(get(pm7, 999)) 
    "done"
}



// Expect
// PersistentMapStruct { count: 0, root: null }
// 1
// 1
// 1
// 100
// 2
// 101
// 2
// 999
// 777
// 4
// null
// 14
// 0
// 9
// null
// done

